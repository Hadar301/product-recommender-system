/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as SearchImport } from './routes/search'
import { Route as LoginImport } from './routes/login'
import { Route as CatalogImport } from './routes/catalog'
import { Route as AccountImport } from './routes/account'
import { Route as IndexImport } from './routes/index'
import { Route as ProductIndexImport } from './routes/product/index'
import { Route as ProductProductIdImport } from './routes/product/$productId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CatalogRoute = CatalogImport.update({
  id: '/catalog',
  path: '/catalog',
  getParentRoute: () => rootRoute,
} as any)

const AccountRoute = AccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductIndexRoute = ProductIndexImport.update({
  id: '/product/',
  path: '/product/',
  getParentRoute: () => rootRoute,
} as any)

const ProductProductIdRoute = ProductProductIdImport.update({
  id: '/product/$productId',
  path: '/product/$productId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/catalog': {
      id: '/catalog'
      path: '/catalog'
      fullPath: '/catalog'
      preLoaderRoute: typeof CatalogImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/product/$productId': {
      id: '/product/$productId'
      path: '/product/$productId'
      fullPath: '/product/$productId'
      preLoaderRoute: typeof ProductProductIdImport
      parentRoute: typeof rootRoute
    }
    '/product/': {
      id: '/product/'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/catalog': typeof CatalogRoute
  '/login': typeof LoginRoute
  '/search': typeof SearchRoute
  '/signup': typeof SignupRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/product': typeof ProductIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/catalog': typeof CatalogRoute
  '/login': typeof LoginRoute
  '/search': typeof SearchRoute
  '/signup': typeof SignupRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/product': typeof ProductIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/catalog': typeof CatalogRoute
  '/login': typeof LoginRoute
  '/search': typeof SearchRoute
  '/signup': typeof SignupRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/product/': typeof ProductIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/catalog'
    | '/login'
    | '/search'
    | '/signup'
    | '/product/$productId'
    | '/product'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/catalog'
    | '/login'
    | '/search'
    | '/signup'
    | '/product/$productId'
    | '/product'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/catalog'
    | '/login'
    | '/search'
    | '/signup'
    | '/product/$productId'
    | '/product/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRoute: typeof AccountRoute
  CatalogRoute: typeof CatalogRoute
  LoginRoute: typeof LoginRoute
  SearchRoute: typeof SearchRoute
  SignupRoute: typeof SignupRoute
  ProductProductIdRoute: typeof ProductProductIdRoute
  ProductIndexRoute: typeof ProductIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRoute,
  CatalogRoute: CatalogRoute,
  LoginRoute: LoginRoute,
  SearchRoute: SearchRoute,
  SignupRoute: SignupRoute,
  ProductProductIdRoute: ProductProductIdRoute,
  ProductIndexRoute: ProductIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/account",
        "/catalog",
        "/login",
        "/search",
        "/signup",
        "/product/$productId",
        "/product/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/account": {
      "filePath": "account.tsx"
    },
    "/catalog": {
      "filePath": "catalog.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/product/$productId": {
      "filePath": "product/$productId.tsx"
    },
    "/product/": {
      "filePath": "product/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
