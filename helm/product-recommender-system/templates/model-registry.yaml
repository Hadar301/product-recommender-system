{{- if .Values.modelRegistry.enabled }}
{{- $modelRegistryExists := (lookup "modelregistry.opendatahub.io/v1beta1" "ModelRegistry" .Values.modelRegistry.namespace .Values.modelRegistry.name) }}
{{- if not $modelRegistryExists }}
apiVersion: modelregistry.opendatahub.io/v1beta1
kind: ModelRegistry
metadata:
  name: {{ .Values.modelRegistry.name }}
  namespace: {{ .Values.modelRegistry.namespace }}
  labels:
    app.kubernetes.io/created-by: model-registry-operator
    app.kubernetes.io/instance: {{ .Values.modelRegistry.name }}
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: modelregistry
    app.kubernetes.io/part-of: model-registry-operator
  annotations:
    modelregistry.opendatahub.io/wait-for-database: "true"
    modelregistry.opendatahub.io/depends-on: "{{ .Values.modelRegistry.database.name }}"
spec:
  grpc:
    port: {{ .Values.modelRegistry.spec.grpc.port }}
  istio:
    gateway:
      grpc:
        gatewayRoute: {{ .Values.modelRegistry.spec.istio.gateway.grpc.gatewayRoute }}
        port: {{ .Values.modelRegistry.spec.istio.gateway.grpc.port }}
        tls:
          mode: {{ .Values.modelRegistry.spec.istio.gateway.grpc.tls.mode }}
      rest:
        gatewayRoute: {{ .Values.modelRegistry.spec.istio.gateway.rest.gatewayRoute }}
        port: {{ .Values.modelRegistry.spec.istio.gateway.rest.port }}
        tls:
          mode: {{ .Values.modelRegistry.spec.istio.gateway.rest.tls.mode }}
    tlsMode: {{ .Values.modelRegistry.spec.istio.tlsMode }}
  mysql:
    database: {{ .Values.modelRegistry.spec.mysql.database }}
    host: {{ .Values.modelRegistry.database.name }}
    passwordSecret:
      key: {{ .Values.modelRegistry.spec.mysql.passwordSecret.key }}
      name: {{ .Values.modelRegistry.database.name }}
    port: {{ .Values.modelRegistry.spec.mysql.port }}
    skipDBCreation: {{ .Values.modelRegistry.spec.mysql.skipDBCreation }}
    username: {{ .Values.modelRegistry.spec.mysql.username }}
  rest:
    port: {{ .Values.modelRegistry.spec.rest.port }}
    serviceRoute: {{ .Values.modelRegistry.spec.rest.serviceRoute }}
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $secretExists := (lookup "v1" "Secret" .Values.modelRegistry.namespace .Values.modelRegistry.database.name) }}
{{- if not $secretExists }}
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/instance: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/part-of: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/managed-by: Helm
  annotations:
    template.openshift.io/expose-database_name: '{.data[''database-name'']}'
    template.openshift.io/expose-password: '{.data[''database-password'']}'
    template.openshift.io/expose-username: '{.data[''database-user'']}'
  name: {{ .Values.modelRegistry.database.name }}
  namespace: {{ .Values.modelRegistry.namespace }}
stringData:
  database-name: "{{ .Values.modelRegistry.database.credentials.databaseName }}"
  database-password: "{{ .Values.modelRegistry.database.credentials.databasePassword }}"
  database-user: "{{ .Values.modelRegistry.database.credentials.databaseUser }}"
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $serviceExists := (lookup "v1" "Service" .Values.modelRegistry.namespace .Values.modelRegistry.database.name) }}
{{- if not $serviceExists }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/instance: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/part-of: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/managed-by: Helm
  annotations:
    template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name==\mysql\)].port}
  name: {{ .Values.modelRegistry.database.name }}
  namespace: {{ .Values.modelRegistry.namespace }}
spec:
  ports:
  - name: mysql
    nodePort: 0
    port: {{ .Values.modelRegistry.database.service.port }}
    protocol: TCP
    appProtocol: tcp
    targetPort: {{ .Values.modelRegistry.database.service.targetPort }}
  selector:
    name: {{ .Values.modelRegistry.database.name }}
  sessionAffinity: None
  type: {{ .Values.modelRegistry.database.service.type }}
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $pvcExists := (lookup "v1" "PersistentVolumeClaim" .Values.modelRegistry.namespace .Values.modelRegistry.database.name) }}
{{- if not $pvcExists }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/name: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/instance: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/part-of: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/managed-by: Helm
  name: {{ .Values.modelRegistry.database.name }}
  namespace: {{ .Values.modelRegistry.namespace }}
spec:
  accessModes:
  {{- range .Values.modelRegistry.database.storage.accessModes }}
  - {{ . }}
  {{- end }}
  resources:
    requests:
      storage: {{ .Values.modelRegistry.database.storage.storageSize }}
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $deploymentExists := (lookup "apps/v1" "Deployment" .Values.modelRegistry.namespace .Values.modelRegistry.database.name) }}
{{- if not $deploymentExists }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/instance: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/part-of: {{ .Values.modelRegistry.database.name }}
    app.kubernetes.io/managed-by: Helm
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  name: {{ .Values.modelRegistry.database.name }}
  namespace: {{ .Values.modelRegistry.namespace }}
spec:
  replicas: {{ .Values.modelRegistry.database.deployment.replicas }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      name: {{ .Values.modelRegistry.database.name }}
  strategy:
    type: {{ .Values.modelRegistry.database.deployment.strategy.type }}
  template:
    metadata:
      labels:
        name: {{ .Values.modelRegistry.database.name }}
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: {{ .Values.modelRegistry.database.name }}
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: {{ .Values.modelRegistry.database.name }}
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: {{ .Values.modelRegistry.database.name }}
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: {{ .Values.modelRegistry.database.name }}
        args:
          - --datadir
          - {{ .Values.modelRegistry.database.deployment.mysql.datadir }}
        image: {{ .Values.modelRegistry.database.deployment.image }}
        imagePullPolicy: {{ .Values.modelRegistry.database.deployment.imagePullPolicy }}
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - mysqladmin -u${MYSQL_USER} -p${MYSQL_ROOT_PASSWORD} ping
          initialDelaySeconds: {{ .Values.modelRegistry.database.deployment.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.modelRegistry.database.deployment.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.modelRegistry.database.deployment.livenessProbe.timeoutSeconds }}
        name: mysql
        ports:
        - containerPort: {{ .Values.modelRegistry.database.service.port }}
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - mysql -D ${MYSQL_DATABASE} -u${MYSQL_USER} -p${MYSQL_ROOT_PASSWORD} -e 'SELECT 1'
          initialDelaySeconds: {{ .Values.modelRegistry.database.deployment.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.modelRegistry.database.deployment.readinessProbe.timeoutSeconds }}
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: {{ .Values.modelRegistry.database.name }}-data
        - mountPath: /etc/mysql/conf.d
          name: mysql-config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: {{ .Values.modelRegistry.database.name }}-data
        persistentVolumeClaim:
          claimName: {{ .Values.modelRegistry.database.name }}
      - name: mysql-config
        configMap:
          name: {{ .Values.modelRegistry.database.name }}-config

{{- $configMapExists := (lookup "v1" "ConfigMap" .Values.modelRegistry.namespace .Values.modelRegistry.database.name) }}
{{- if not $configMapExists }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.modelRegistry.database.name }}-config
  namespace: {{ .Values.modelRegistry.namespace }}
data:
  mysql.cnf: |
    [mysqld]
    default_authentication_plugin=caching_sha2_password
    log_error_verbosity=1
    skip_log_bin=1
    [mysql]
    default_auth=caching_sha2_password
{{- end }}
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $roleBindingExists := (lookup "rbac.authorization.k8s.io/v1" "RoleBinding" .Values.modelRegistry.namespace "modelregistry-rolebinding-{{ .Release.Namespace }}") }}
{{- if not $roleBindingExists }}
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: modelregistry-rolebinding-{{ .Release.Namespace }}
  namespace: {{ .Values.modelRegistry.namespace }}
subjects:
  - kind: ServiceAccount
    name: pipeline-runner-dspa
    namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Values.modelRegistry.accessrole }}
{{- end }}
{{- end }}
